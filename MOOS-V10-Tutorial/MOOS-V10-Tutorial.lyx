#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\begin_preamble
\usepackage{verbatim}
%\usepackage{xcolor}
\usepackage{listings}
\lstdefinestyle{Bash}
{language=bash,
keywordstyle=\color{blue},
basicstyle=\ttfamily,
morekeywords={moosuser@machine},
alsoletter={:~$},
morekeywords=[2]{moosuser@machine:},
keywordstyle=[2]{\color{red}},
literate={\$}{{\textcolor{red}{\$}}}1 
         {:}{{\textcolor{red}{:}}}1
         {~}{{\textcolor{red}{\textasciitilde}}}1,
}

\usepackage[usenames,dvipsnames]{xcolor}

\usepackage{listings}

\lstset{
tabsize=4,
language=matlab,
        basicstyle=\small,
        %upquote=true,
        aboveskip={1.5\baselineskip},
        columns=fixed,
        showstringspaces=false,
        extendedchars=true,
        breaklines=true,
        prebreak = \raisebox{0ex}[0ex][0ex]{\ensuremath{\hookleftarrow}},
frame=single,
        showtabs=false,
        showspaces=false,
        showstringspaces=false,
        identifierstyle=\ttfamily,
        keywordstyle=\color[rgb]{0,0,1},
        commentstyle=\color[rgb]{0.133,0.545,0.133},
        stringstyle=\color[rgb]{0.627,0.126,0.941},
language=c++
}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 3cm
\topmargin 3cm
\rightmargin 3cm
\bottommargin 3cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
A MOOS-V10 Tutorial
\end_layout

\begin_layout Author
Paul Newman, University of Oxford
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename ../using_v10/images/MOOSV-10-256.pdf
	width 3cm

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vspace{2cm}
\end_layout

\end_inset

....ten years on
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Getting Started
\end_layout

\begin_layout Subsection
Acquiring and Building V10 
\begin_inset CommandInset label
LatexCommand label
name "sub:Building-V10"

\end_inset


\end_layout

\begin_layout Subsubsection
The quickest way
\end_layout

\begin_layout Standard
We shall begin where we should and check out a version of MOOS-V10 from
 a git repos.
 We will follow good practice and do an out of place build - the source
 code will go in 
\begin_inset Quotes eld
\end_inset

src
\begin_inset Quotes erd
\end_inset

 and we will build in 
\begin_inset Quotes eld
\end_inset

build
\begin_inset Quotes erd
\end_inset

.
 We will also, after fetching the source switch to the 
\begin_inset Quotes eld
\end_inset

devel
\begin_inset Quotes erd
\end_inset

 branch because here we are living on the edge 
\begin_inset Foot
status open

\begin_layout Plain Layout
if you want to know what branches are available type 
\family typewriter
git branch
\end_layout

\end_inset


\family typewriter
.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[style=Bash] 
\end_layout

\begin_layout Plain Layout

pmn@mac:~$ mkdir core-moos-v10 
\end_layout

\begin_layout Plain Layout

pmn@mac:~$ cd core-moos-v10
\end_layout

\begin_layout Plain Layout

pmn@mac:~$ git clone https://github.com/themoos/core-moos.git src
\end_layout

\begin_layout Plain Layout

pmn@mac:~$ cd src
\end_layout

\begin_layout Plain Layout

pmn@mac:~$ git checkout devel 
\end_layout

\begin_layout Plain Layout

pmn@mac:~$ cd ..
\end_layout

\begin_layout Plain Layout

pmn@mac:~$ mkdir build
\end_layout

\begin_layout Plain Layout

pmn@mac:~$ ccmake ../src
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
At this point you should, after hitting 'c' a couple of times be presented
 with a CMake screen that looks like that shown in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:The-default-build"

\end_inset

 (note some of the entries are platform dependent so don't worry if what
 you see is not identical to this).
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../using_v10/images/v10-simple-build.pdf
	width 90col%

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:The-default-build"

\end_inset

The default build screen for MOOS V10.
 Note that by default USE_ASYNC_COMMS is off.
 If you want really fast communications you should enable this.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vspace{5mm}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
You are are now in a position to build the MOOS.
 So press 'c' until 'g' appears, then press 'g' and you are good to go.
 Then at the terminal prompt type 'make' to build the project.
 Two directories should have been created 
\series bold
bin
\series default
 and 
\series bold
lib.
 
\series default
In lib you will see 
\family typewriter
libMOOS.a
\family default
 and in 
\family typewriter
bin
\family default
 you will find the newly created 
\family typewriter
MOOSDB.

\family default
 If you run up the MOOSDB (by typing ./MOOSDB you should see output similar
 to that in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:running-the-new-db"

\end_inset

.
 You are now all set to begin developing with MOOS.
\end_layout

\begin_layout Subsubsection
A note for exisiting 
\family typewriter
MOOS
\family default
 Users
\end_layout

\begin_layout Standard
If you are already an old hand at MOOS and simply want to link your existing
 code against MOOS V10 without needing to worry about the new header, rationalis
ed file structure introduced in MOOS V10 then you will need to turn on 
\family typewriter
ENABLE_V10_COMPATIBILITY.
 
\family default
This switch adds an additional set of include path to those exported by
 the project, which have the same structure as those present in previous
 (now legacy) versions of MOOS.
 If you 
\begin_inset Quotes eld
\end_inset

include
\begin_inset Quotes erd
\end_inset

 one of these files they actually simply redirect to include header files
 residing in the new structure.
 But be advised that this is not a happy long term policy - you should think,
 if possible, about updating your code - but there is much to be said for
 not 
\emph on
having 
\emph default
to change your code simply to use V10.
 Hence th introduction of this switch.
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vspace{5mm}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\series bold
Tip:
\series default
 Turn on 
\family typewriter
ENABLE_V10_COMPATIBILITY 
\family default
to make V10 appear to have the header structure of earlier versions.
 This allows you to use V10 without needing to change any of your source
 code
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vspace{5mm}
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\series bold
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout

\series bold
Tip: 
\series default
you can use the V10 
\family typewriter
MOOSDB
\family default
 with old MOOS applications - you don't 
\shape italic
have
\shape default
 to recompile them.
 V10 is backwards compatible.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vspace{5mm}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../using_v10/images/MOOSDBRunning.pdf
	width 50col%

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:running-the-new-db"

\end_inset

running the new MOOSDB
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Library Structure and Header Files
\end_layout

\begin_layout Standard
The classes that implement the communications and application management
 (for example 
\family typewriter
CMOOSApp)
\family default
 reside in a single library called 
\family typewriter
libMOOS.
 
\family default
There are in fact four key subdirectories in 
\family typewriter
libMOOS
\family default
.
 In figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Top-level-directory-structure"

\end_inset

you can see the basic structure of the code base.
 
\end_layout

\begin_layout Description
App contains the classes like CMOOSApp and CMOOSInstrument - you use thse
 to make application writing very easy
\end_layout

\begin_layout Description
Comms contains everything to do with MOOS IPC communications
\end_layout

\begin_layout Description
Utils contains everything that used to be in MOOSGenLib (with some nice
 additions)
\end_layout

\begin_layout Description
Thirdparty contains small lumps of thirdparty code which is being leveraged
 in V10 (all licenses included)
\end_layout

\begin_layout Description
include contains some high level include directories that make using libMOOS
 easy (and backwards compatible)
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../using_v10/images/structure.pdf
	width 50col%

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
Top-le
\begin_inset CommandInset label
LatexCommand label
name "fig:Top-level-directory-structure"

\end_inset

vel directory structure for MOOS V10
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
You might be wondering where all the header files that used to be in 
\family typewriter
MOOSGenLib
\family default
 have gone.
 They are now in 
\family typewriter

\begin_inset Quotes eld
\end_inset

MOOS/libMOOS/Utils/*.h
\begin_inset Quotes erd
\end_inset

.
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vspace{5mm}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\series bold
Tip:
\series default
 If you were previously including 
\family typewriter

\begin_inset Quotes eld
\end_inset

MOOSGenLibGlobalHelper.h
\begin_inset Quotes erd
\end_inset


\family default
 then you now need to include 
\begin_inset Quotes eld
\end_inset


\family typewriter
MOOS/libMOOS/Utils/
\family default
MOOSUtilityFunctions
\family typewriter
.h
\family default

\begin_inset Quotes erd
\end_inset

 instead (or use the compatibility mode described in Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Building-V10"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Changing 
\family typewriter
#include
\family default
 directives:
\end_layout

\begin_layout Standard
If you are prepared to invest 30 minutes in committing to the new MOOS V10
 project structure then this section tells you what to do.
 If you are as yet unsure if you want to upgrade, then don't bother simply
 use the 
\family typewriter
ENABLE_V10_COMPATIBILITY 
\family default
option in CMake - this allows you to simply revert to old versions of MOOS
 without lifting a finger.
\end_layout

\begin_layout Standard
The actions needed to upgrade are pretty simple.
 Where previously you had something like 
\family typewriter
#include 
\begin_inset Quotes eld
\end_inset

MOOSLIB/MOOSCommClient.h
\begin_inset Quotes erd
\end_inset


\family default
 you now use 
\family typewriter
#include 
\begin_inset Quotes eld
\end_inset

MOOS/libMOOS/Comms/MOOSCommClient.h
\begin_inset Quotes erd
\end_inset

.
 
\family default
The following table will help you figure out how to include an particular
 header.
\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="2">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="50col%">
<column alignment="left" valignment="top" width="50col%">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Header
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
include prefix
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
MOOSAsyncCommClient.h MOOSMsg.h XPCEndian.h XPCTcpSocket.h MOOSCommClient.h MOOSSkewF
ilter.h XPCException.h XPCUdpSocket.h MOOSCommObject.h MOOSVariable.h XPCGetHostInfo.h
 MOOSCommPkt.h ServerAudit.h XPCGetProtocol.h MOOSCommServer.h ThreadedCommServer.h
 XPCSocket.h
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
#include 
\begin_inset Quotes eld
\end_inset

MOOS/libMOOS/Comms/---.h
\begin_inset Quotes erd
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
ConsoleColours.h MOOSMemoryMapped.h MOOSTimeJournal.h IPV4Address.h MOOSNTSerialPort.
h MOOSUtilityFunctions.h InterpBuffer.h MOOSPlaybackStatus.h MOOSUtils.h KeyboardCap
ture.h MOOSSafeList.h NTSerial.h MOOSAssert.h MOOSSafeList.h~ ProcessConfigReader.h
 MOOSException.h MOOSScopedLock.h SafeList.h MOOSFileReader.h MOOSSerialPort.h
 TMaxPair.h MOOSLinuxSerialPort.h MOOSThread.h TMinPair.h MOOSLock.h MOOSThreadedTime
Journal.h ThreadPrint.h
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
#include 
\begin_inset Quotes eld
\end_inset

MOOS/libMOOS/Utils/---.h
\begin_inset Quotes erd
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
MOOSApp.h MOOSInstrument.h
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
#include 
\begin_inset Quotes eld
\end_inset

MOOS/libMOOS/App/---.h
\begin_inset Quotes erd
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
MOOSLib.h
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
#include 
\begin_inset Quotes eld
\end_inset

MOOS/libMOOS/MOOSLib.h
\begin_inset Quotes erd
\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsection
Importing and Building Against MOOS-V10
\end_layout

\begin_layout Standard
So now you have built the new MOOS.
 Next questions is 
\begin_inset Quotes eld
\end_inset

how do you link against it
\begin_inset Quotes erd
\end_inset

.
 If you use 
\family typewriter
CMake
\family default
 then this is trivial you just need to insert the line 
\family typewriter
find_package(MOOS 10)
\family default
 in your 
\family typewriter
CMakeList.txt
\family default
 script.
 This goes and finds the latest build you made of MOOS V10 (and only V10)
 and collects the correct include paths, library names and library paths
 and puts them in the following 
\family typewriter
CMake
\family default
 variables:
\end_layout

\begin_layout Description

\family typewriter
MOOS_INCLUDE_DIRS
\family default
\series bold
 
\series default
This contains the list of include directories you need to include to find
 
\family typewriter
MOOS V10
\family default
 header files.
\end_layout

\begin_layout Description

\family typewriter
MOOS_DEPEND_INCLUDE_DIRS 
\family default
This contains the list of include directories which MOOS needs to find teh
 headers it depends on (should be empty)
\end_layout

\begin_layout Description

\family typewriter
MOOS_LIBRARIES 
\family default
This contains the precise library name ( absolute path) for 
\family typewriter
libMOOS 
\end_layout

\begin_layout Description

\family typewriter
MOOS_DEPEND_LIBRARIES 
\family default
This contains the absolute paths for the libraries MOOS depends on (should
 be empty)
\end_layout

\begin_layout Standard

\series medium
These variables can be used to import all you need to know about MOOS into
 an external project.
 You can see how to do this in some the example 
\family typewriter
\series default
CMakeLists.txt
\family default
\series medium
 file given below.
 Here we make an executable called 
\family typewriter
\series default
example_moos 
\family default
, explicitly search for MOOS-V10, set up include paths, set up an executable
 and finally indicate how to link.
\end_layout

\begin_layout Standard
\begin_inset Box Doublebox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "basicstyle={\small},language=bash"
inline false
status open

\begin_layout Plain Layout

#this builds some code using MOOS
\end_layout

\begin_layout Plain Layout

set(EXECNAME example_moos)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#find MOOS version 10 be explicit about version 10 so we don't
\end_layout

\begin_layout Plain Layout

#find another old version
\end_layout

\begin_layout Plain Layout

find_package(MOOS 10)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#what source files are needed to make this exectutable? 
\end_layout

\begin_layout Plain Layout

set(SRCS  example_moos.cpp)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#where should one look to find headers?
\end_layout

\begin_layout Plain Layout

include_directories( ${MOOS_INCLUDE_DIRS} ${MOOS_DEPEND_INCLUDE_DIRS})
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#state we wish to make a computer program
\end_layout

\begin_layout Plain Layout

add_executable(${EXECNAME} ${SRCS} )
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#and state what libraries said program needs to link against
\end_layout

\begin_layout Plain Layout

target_link_libraries(${EXECNAME} ${MOOS_LIBRARIES} ${MOOS_DEPEND_LIBRARIES})
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
How is MOOS found?
\end_layout

\begin_layout Standard
You have probably noticed that you do not need to install MOOS V10 for 
\family typewriter
find_package(MOOS V10)
\family default
 to work.
 CMake simply appears to automagically find the latest build directory.
 It is worth understanding how this is done.
 CMake provides support for 
\family typewriter
find_package 
\family default
by writing at build time to a file in ~/.cmake/modules.
 In this case because we are talking about 
\family typewriter
MOOS
\family default
 there is a file in ~/.cmake/modules/MOOS (who's name is a whole load of
 crazy letters) inside of which is the location to a file called 
\family typewriter
MOOSConfig.cmake.
 
\family default
This file  is created in the build directory when MOOS is configured.
 The find_package directive imports 
\family typewriter
MOOSConfig.cmake
\family default
 (and from there 
\family typewriter
UseMOOS.cmake
\family default
) and this tells the importing CMake instance how to use MOOS.
 
\end_layout

\begin_layout Subsubsection
Trouble Shooting
\end_layout

\begin_layout Standard
All the above should go smoothly but there have been instances reported
 in which things go wrong - this is always due to previous installations
 of MOOS and old configuration files hanging around.
 Executing the following steps should help if you get into trouble
\end_layout

\begin_layout Itemize
clean down the 
\family typewriter
MOOS-V10
\family default
 project (why not remove the whole build directory?)
\end_layout

\begin_layout Itemize
remove all contents of 
\family typewriter
~/.cmake/modules/MOOS
\end_layout

\begin_layout Itemize
remove any old copies of MOOSConfig.cmake you may have hanging around in
 you build tree.
 Note that once upon a time, long ago there was a 
\family typewriter
MOOSConfig.cmake
\family default
 file checked into the source tree of MOOS-IvP.
 This can cause all kinds of trouble......
\end_layout

\begin_layout Itemize
If header files are not being found by you project:
\end_layout

\begin_deeper
\begin_layout Itemize
if your code previously worked with older versions of MOOS did you change
 your source code to reflect the new locations of headers? Or, if you really
 don't want to change you code, did you enable 
\family typewriter
V10_COMPATIBILITY
\family default
 when you built MOOS-V10?
\end_layout

\end_deeper
\begin_layout Section
Example Codes
\end_layout

\begin_layout Subsection
The simplest example using 
\family typewriter
MOOSAsyncCommClient
\end_layout

\begin_layout Standard
The simplest (in terms of its proximity to the core communication classes)
 example of using MOOS-V10 communications is given in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:The-simplest-example"

\end_inset

.
 Here a MOOS::MOOSAsyncCommClient is instantiated in its rawest form.
 It is configured with a Mail and OnConnect callback and set free with a
 call to Run.
 Note that in the Connect callback it registers for the data that is being
 posted once a second in the main() forever loop.
 Many MOOS users will be used to using CMOOSApp which manages the interaction
 with the Comms Client Objects however it is instructive to look at the
 most fundamental example.
 The CMakeLists.txt file for this example is also given below.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinputlisting[caption={A simple example using MOOSAsyncCommClient}]{examples/C
ommsExample/CommsExample.cpp}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinputlisting[caption={CMakeLists.txt to the simple example above}]{ examples/C
ommsExample/CMakeLists.txt }
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
The Simplest Example using CMOOSApp
\end_layout

\begin_layout Standard
We can of course achieve the same thing by subclassing CMOOSApp.
 The code listing below shows how.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinputlisting[caption={A simple example using MOOSAsyncCommClient}]{examples/A
ppExample/AppExample.cpp}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Sharing Video Rate Data
\end_layout

\begin_layout Standard
Here is a simple example code for sharing video data using the package OpenCV
 
\begin_inset Foot
status open

\begin_layout Plain Layout
so you will need OpenCV installed on your machine.
 The CMakeLists.txt file should find this installation and handle everything
 for you but if you are using mac ports you may need to specify the location
 of OpenCV in the ccmake gui as Cmake does not look in /opt by default.
 
\end_layout

\end_inset

.
 The program can be started in one of two ways - once as a server which
 opens a camera and starts streaming images and as a client which displays
 them in a window.
 Note this is not an elegant program - it fixes the images size and does
 a fairly ugly bit of memory management.
 It is presented here as a quick and dirty exposition of using MOOS to send
 data at a moderate rate - its not an example of good use of OpenCV.
 
\end_layout

\begin_layout Itemize
Start a MOOSDB
\end_layout

\begin_layout Itemize
To start a server in a terminal window from the command line whilst in the
 directory containing the binary type :
\family typewriter
 
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
./camera_example -s --moos_name SERVER
\end_layout

\end_deeper
\begin_layout Itemize
To start a client from a similar terminal to that above type : 
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
./camera_example --moos_name A
\end_layout

\end_deeper
\begin_layout Itemize
To start another client, you guess it, open another terminal and try
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
./camera_example --moos_name B
\end_layout

\end_deeper
\begin_layout Standard
If you do the above you should see you camera output appearing in two windows
 with very little lag.
 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinputlisting[caption={Example code to build a camera sharing example}]{exampl
es/VideoShare/CameraExample.cpp}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinputlisting[caption={CMakeLists.txt to build the camera sharing example
 above}]{ examples/VideoShare/CMakeLists.txt }
\end_layout

\end_inset


\end_layout

\begin_layout Standard
There are several things to note about this example which are worth spotting:
\end_layout

\begin_layout Enumerate
The way in which MOOS-V10 can handle command line argument parsing for you
 using the 
\family typewriter
OnParseCommandLine()
\family default
 virtual function in 
\family typewriter
CMOOSApp
\family default
.
 Also note that the switches like 
\family typewriter
--moos_name
\family default
 are handled automatically for you.
 If this is a surprise read section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Common-Command-Line"

\end_inset

.
\end_layout

\begin_layout Enumerate
The way in which in this example 
\family typewriter
SetIterateMode
\family default
 is used to make the application respond quickly to the reception of mail.
\end_layout

\end_body
\end_document
